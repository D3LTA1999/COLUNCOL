{"version":3,"sources":["config/reducers.ts","config/API.ts","components/core/CoreNavigationHeader.tsx","components/core/CoreNavigationContent.tsx","components/core/CoreNavigationDrawer.tsx","components/core/CoreRouter.tsx","components/core/CoreAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx","config/authReducer.ts"],"names":["combineReducers","auth","authReducer","BASE_URL","window","location","href","includes","BASE_COOKIE_CONFIG","expires","axios","get","then","v","console","log","data","APILogout","cookies","remove","CoreNavigationHeader","shouldComponentUpdate","nextProps","props","loggedIn","logoutClick","onLogout","render","username","Typography","className","variant","Button","component","Link","color","onClick","to","React","Component","CoreNavigationContent","List","ListItem","button","ListItemIcon","Person","ListItemText","primary","Face","Book","AttachMoney","Apartment","CoreNavigationDrawer","Drawer","anchor","classes","paper","Divider","connect","dispatch","logoutAction","LazyHomePage","Loadable","loader","loading","LinearProgress","LazyNotFoundPage","LazyLoginPage","CoreRouter","exact","path","CoreAppBar","AppBar","position","Toolbar","store","createStore","reducers","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","loginAction","type","payload","initialState","state","action"],"mappings":"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","file":"static/js/main.f6f73ebb.chunk.js","sourcesContent":["import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nexport default combineReducers({\r\n    auth: authReducer\r\n});\r\n","import axios from \"axios\";\r\nimport cookies from \"js-cookie\";\r\n\r\ntype Hash = { [x: string]: any }\r\ntype APIResponse =\r\n    { okay: true, payload: Hash } |\r\n    { okay: false, errors: Hash }\r\n\r\nconst BASE_URL = window.location.href.includes(\"localhost\") ? \"http://192.168.99.101:8101/api\" : \"/api\";\r\nconst BASE_COOKIE_CONFIG = {expires: 3};\r\n\r\nconst url = (...dirs: string[]): string => (`${BASE_URL}/${dirs.join(\"/\")}`);\r\nconst withQueryParams = (url: string, query_params: Hash): string => (`${url}?${Object.keys(query_params).map((k) => (`${k}=${query_params[k]}`)).join(\"&\")}`);\r\n\r\naxios.get(BASE_URL + \"/connectionTest.php\").then(\r\n    (v) => console.log(v.data),\r\n);\r\n\r\nconst APILogout = () => cookies.remove(\"token\", BASE_COOKIE_CONFIG);\r\n\r\nconst startApp = async (): Promise<APIResponse> => {\r\n    const token = cookies.get(\"token\");\r\n    const username = cookies.get(\"username\");\r\n    if (token && username) {\r\n        try {\r\n            const response = await axios.get(withQueryParams(url(\"users\", \"valid-token\"), {token: token}));\r\n            cookies.set(\"token\", token, BASE_COOKIE_CONFIG);\r\n            cookies.set(\"username\", response.data.payload.username, BASE_COOKIE_CONFIG);\r\n            return {okay: true, payload: {token: token, username: response.data.payload.username}}\r\n        } catch (e) {\r\n            cookies.remove(\"token\", BASE_COOKIE_CONFIG);\r\n            cookies.remove(\"username\", BASE_COOKIE_CONFIG);\r\n            if (e.response) return {okay: false, errors: e.response.data};\r\n            else return {okay: false, errors: {credentials: \"Connection error.\"}};\r\n        }\r\n    }\r\n    return {okay: false, errors: {}};\r\n};\r\n\r\nexport {APILogout};","import React, {Fragment} from \"react\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {APILogout} from \"../../config/API\";\r\n\r\ntype CoreNavigationHeaderProps = {\r\n    loggedIn: boolean,\r\n    username: string,\r\n    onLogout: () => void\r\n}\r\n\r\nexport default class CoreNavigationHeader extends React.Component<CoreNavigationHeaderProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationHeaderProps>): boolean => this.props.loggedIn !== nextProps.loggedIn;\r\n\r\n    logoutClick = () => {\r\n        this.props.onLogout();\r\n        APILogout();\r\n    };\r\n\r\n    render = () => {\r\n        const {loggedIn, username} = this.props;\r\n        if (loggedIn) return (\r\n            <Fragment>\r\n                <Typography className={\"header-username\"} variant={\"h6\"}>{username}</Typography>\r\n                <Button component={Link} color={\"secondary\"} onClick={this.logoutClick} to={\"/\"}>\r\n                    cerrar sesion\r\n                </Button>\r\n            </Fragment>\r\n        );\r\n        return <Button component={Link} color={\"primary\"} to={\"/login\"}>iniciar sesion</Button>;\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport {List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport {Apartment, AttachMoney, Book, Face, Person} from \"@material-ui/icons\";\r\n\r\ntype CoreNavigationContentProps = { loggedIn: boolean };\r\n\r\nexport default class CoreNavigationContent extends React.Component<CoreNavigationContentProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationContentProps>): boolean => this.props.loggedIn !== nextProps.loggedIn;\r\n\r\n    render = () => {\r\n        if (!this.props.loggedIn) return null;\r\n        return (\r\n            <List>\r\n                <ListItem button>\r\n                    <ListItemIcon><Person/></ListItemIcon>\r\n                    <ListItemText primary={\"Profesores\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Face/></ListItemIcon>\r\n                    <ListItemText primary={\"Estudiantes\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Book/></ListItemIcon>\r\n                    <ListItemText primary={\"Asignaturas\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><AttachMoney/></ListItemIcon>\r\n                    <ListItemText primary={\"Finanzas\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Apartment/></ListItemIcon>\r\n                    <ListItemText primary={\"R. FÃ­sicos\"}/>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Divider, Drawer} from \"@material-ui/core\";\r\nimport CoreNavigationHeader from \"./CoreNavigationHeader\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutAction} from \"../../config/authReducer\";\r\nimport CoreNavigationContent from \"./CoreNavigationContent\";\r\n\r\ntype ReduxProps = Partial<{\r\n    loggedIn: boolean,\r\n    username: string,\r\n    onLogout: () => void\r\n}>;\r\n\r\ntype CoreNavigationDrawerProps = {} & ReduxProps;\r\n\r\nclass CoreNavigationDrawer extends React.Component<CoreNavigationDrawerProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationDrawerProps>): boolean => this.props.loggedIn !== nextProps.loggedIn;\r\n\r\n    render = () => {\r\n        const {loggedIn = false, username = \"\", onLogout} = this.props;\r\n        return (\r\n            <Drawer variant={\"permanent\"} anchor={\"left\"} className={\"drawer\"} classes={{paper: \"paper\"}}>\r\n                <CoreNavigationHeader onLogout={onLogout!!} loggedIn={loggedIn} username={username}/>\r\n                <Divider/>\r\n                <CoreNavigationContent loggedIn={loggedIn}/>\r\n            </Drawer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({auth}: any): ReduxProps => ({\r\n    loggedIn: auth.loggedIn,\r\n    username: auth.username\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (p: any) => void): ReduxProps => ({\r\n    onLogout: () => dispatch(logoutAction())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CoreNavigationDrawer);","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\nconst LazyHomePage = Loadable({\r\n    loader: () => import(\"../../pages/HomePage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\nconst LazyNotFoundPage = Loadable({\r\n    loader: () => import(\"../../pages/NotFoundPage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\nconst LazyLoginPage = Loadable({\r\n    loader: () => import(\"../../pages/LoginPage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\n\r\nexport default class CoreRouter extends React.Component {\r\n    shouldComponentUpdate = (): boolean => false;\r\n\r\n    render = () => {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={LazyHomePage}/>\r\n                <Route path={\"/login\"} component={LazyLoginPage}/>\r\n                <Route component={LazyNotFoundPage}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\n\r\nexport default class CoreAppBar extends React.Component {\r\n    shouldComponentUpdate = (): boolean => false;\r\n\r\n    render = () => {\r\n        return (\r\n            <Fragment>\r\n                <AppBar position={\"fixed\"} className={\"bar\"}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">Coluncol</Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Toolbar/>\r\n            </Fragment>\r\n        );\r\n    };\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {createStore} from \"redux\";\nimport reducers from \"./config/reducers\";\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom'\nimport CoreNavigationDrawer from \"./components/core/CoreNavigationDrawer\";\nimport CoreRouter from \"./components/core/CoreRouter\";\nimport CoreAppBar from \"./components/core/CoreAppBar\";\n\nconst store = createStore(reducers);\n\nexport default class App extends React.Component {\n    render = () => {\n        return (\n            <BrowserRouter>\n                <Provider store={store}>\n                    <div className=\"App\">\n                        <CoreNavigationDrawer/>\n                        <main className={\"content\"}>\n                            <CoreAppBar/>\n                            <CoreRouter/>\n                        </main>\n                    </div>\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","interface AuthState {\r\n    loggedIn: boolean,\r\n    username: string | null\r\n}\r\n\r\nconst LOGIN = 'LOGIN';\r\nconst LOGOUT = 'LOGOUT';\r\n\r\ntype Action = { type: 'LOGIN', payload: { username: string } } | { type: 'LOGOUT' }\r\n\r\nconst loginAction = (username: string): Action => ({type: LOGIN, payload: {username}});\r\nconst logoutAction = (): Action => ({type: LOGOUT});\r\n\r\nconst initialState: AuthState = {\r\n    loggedIn: false,\r\n    username: null\r\n};\r\n\r\nconst authReducer = (state: AuthState = initialState, action: Action): AuthState => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {...state, loggedIn: true, username: action.payload.username};\r\n        case LOGOUT:\r\n            return {...state, loggedIn: false, username: null};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport {LOGIN, LOGOUT, loginAction, logoutAction, authReducer};"],"sourceRoot":""}