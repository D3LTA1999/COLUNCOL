{"version":3,"sources":["components/core/CoreRouter.tsx","config/API.ts","components/core/CoreNavigationHeader.tsx","components/core/CoreNavigationContent.tsx","components/core/CoreNavigationDrawer.tsx","components/core/CoreAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx","components/pure/index.tsx","config/store.ts"],"names":["LazyHomePage","Loadable","loader","loading","LinearProgress","LazyNotFoundPage","LazyLoginPage","LazyStudyPlanPage","CoreRouter","shouldComponentUpdate","render","exact","path","component","React","Component","BASE_URL","window","location","href","includes","BASE_COOKIE_CONFIG","expires","axios","get","then","v","console","log","data","APILogout","cookies","remove","CoreNavigationHeader","nextProps","props","logged","logoutClick","onLogout","username","className","variant","Link","color","onClick","to","CoreNavigationContent","List","ListItem","button","ListItemIcon","Home","ListItemText","primary","Book","Person","Face","AttachMoney","Apartment","CoreNavigationDrawer","inject","observer","this","store","logout","isLogged","auth","Drawer","anchor","classes","paper","Divider","WithStore","CoreAppBar","AppBar","position","Toolbar","App","Grid","container","item","xs","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","PureTypography","children","PureButton","disabled","PureTextField","value","Store","findArea","id","studyAreas","find","area","observable","admin","name","bossId","hours","areaId","computed","action"],"mappings":"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","file":"static/js/main.fdc5ee32.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\nconst LazyHomePage = Loadable({\r\n    loader: () => import(\"../../pages/HomePage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\nconst LazyNotFoundPage = Loadable({\r\n    loader: () => import(\"../../pages/NotFoundPage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\nconst LazyLoginPage = Loadable({\r\n    loader: () => import(\"../../pages/LoginPage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\nconst LazyStudyPlanPage = Loadable({\r\n    loader: () => import(\"../../pages/StudyPlanPage\"),\r\n    loading: () => <LinearProgress/>\r\n});\r\n\r\nexport default class CoreRouter extends React.Component {\r\n    shouldComponentUpdate = (): boolean => false;\r\n\r\n    render = () => {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={LazyHomePage}/>\r\n                <Route path={\"/login\"} component={LazyLoginPage}/>\r\n                <Route path={\"/study-plan\"} component={LazyStudyPlanPage}/>\r\n                <Route component={LazyNotFoundPage}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport cookies from \"js-cookie\";\r\n\r\ntype Hash = { [x: string]: any }\r\ntype APIResponse =\r\n    { okay: true, payload: Hash } |\r\n    { okay: false, errors: Hash }\r\n\r\nconst BASE_URL = window.location.href.includes(\"localhost\") ? \"http://192.168.99.101:8101/api\" : \"/api\";\r\nconst BASE_COOKIE_CONFIG = {expires: 3};\r\n\r\nconst url = (...dirs: string[]): string => (`${BASE_URL}/${dirs.join(\"/\")}`);\r\nconst withQueryParams = (url: string, query_params: Hash): string => (`${url}?${Object.keys(query_params).map((k) => (`${k}=${query_params[k]}`)).join(\"&\")}`);\r\n\r\naxios.get(BASE_URL + \"/connectionTest.php\").then(\r\n    (v) => console.log(v.data),\r\n);\r\n\r\nconst APILogout = () => cookies.remove(\"token\", BASE_COOKIE_CONFIG);\r\n\r\nconst startApp = async (): Promise<APIResponse> => {\r\n    const token = cookies.get(\"token\");\r\n    const username = cookies.get(\"username\");\r\n    if (token && username) {\r\n        try {\r\n            const response = await axios.get(withQueryParams(url(\"users\", \"valid-token\"), {token: token}));\r\n            cookies.set(\"token\", token, BASE_COOKIE_CONFIG);\r\n            cookies.set(\"username\", response.data.payload.username, BASE_COOKIE_CONFIG);\r\n            return {okay: true, payload: {token: token, username: response.data.payload.username}}\r\n        } catch (e) {\r\n            cookies.remove(\"token\", BASE_COOKIE_CONFIG);\r\n            cookies.remove(\"username\", BASE_COOKIE_CONFIG);\r\n            if (e.response) return {okay: false, errors: e.response.data};\r\n            else return {okay: false, errors: {credentials: \"Connection error.\"}};\r\n        }\r\n    }\r\n    return {okay: false, errors: {}};\r\n};\r\n\r\nexport {APILogout};","import React, {Fragment} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {APILogout} from \"../../config/API\";\r\nimport {PureButton, PureTypography} from \"../pure\";\r\n\r\ntype CoreNavigationHeaderProps = {\r\n    logged: boolean,\r\n    username: string,\r\n    onLogout: () => void\r\n}\r\n\r\nexport default class CoreNavigationHeader extends React.Component<CoreNavigationHeaderProps> {\r\n    shouldComponentUpdate = (nextProps: any): boolean => this.props.logged !== nextProps.logged;\r\n\r\n    logoutClick = () => {\r\n        this.props.onLogout();\r\n        APILogout();\r\n    };\r\n\r\n    render = () => {\r\n        const {logged, username} = this.props;\r\n        if (logged) return (\r\n            <Fragment>\r\n                <PureTypography className={\"header-username\"} variant={\"h6\"}>{username}</PureTypography>\r\n                <PureButton component={Link} color={\"secondary\"} onClick={this.logoutClick} to={\"/\"}>\r\n                    cerrar sesion\r\n                </PureButton>\r\n            </Fragment>\r\n        );\r\n        return <PureButton component={Link} color={\"primary\"} to={\"/login\"}>iniciar sesion</PureButton>;\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport {List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport {Apartment, AttachMoney, Book, Face, Home, Person} from \"@material-ui/icons\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype CoreNavigationContentProps = { logged: boolean };\r\n\r\nexport default class CoreNavigationContent extends React.Component<CoreNavigationContentProps> {\r\n    shouldComponentUpdate = (nextProps: any): boolean => this.props.logged !== nextProps.logged;\r\n\r\n    render = () => {\r\n        if (this.props.logged) return (\r\n            <List>\r\n                <ListItem component={Link} to={\"/\"} button>\r\n                    <ListItemIcon><Home/></ListItemIcon>\r\n                    <ListItemText primary={\"Inicio\"}/>\r\n                </ListItem>\r\n                <ListItem component={Link} to={\"/study-plan\"} button>\r\n                    <ListItemIcon><Book/></ListItemIcon>\r\n                    <ListItemText primary={\"P. estudio\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Person/></ListItemIcon>\r\n                    <ListItemText primary={\"Profesores\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Face/></ListItemIcon>\r\n                    <ListItemText primary={\"Estudiantes\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Book/></ListItemIcon>\r\n                    <ListItemText primary={\"Asignaturas\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><AttachMoney/></ListItemIcon>\r\n                    <ListItemText primary={\"Finanzas\"}/>\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemIcon><Apartment/></ListItemIcon>\r\n                    <ListItemText primary={\"R. Físicos\"}/>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n        return (\r\n            <List>\r\n                <ListItem component={Link} to={\"/\"} button>\r\n                    <ListItemIcon><Home/></ListItemIcon>\r\n                    <ListItemText primary={\"Inicio\"}/>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Divider, Drawer} from \"@material-ui/core\";\r\nimport CoreNavigationHeader from \"./CoreNavigationHeader\";\r\nimport CoreNavigationContent from \"./CoreNavigationContent\";\r\nimport {WithStore} from \"../../config/store\"\r\nimport {inject, observer} from \"mobx-react\";\r\n\r\n@inject(\"store\")\r\n@observer\r\nexport default class CoreNavigationDrawer extends WithStore {\r\n    render() {\r\n        const {logout, isLogged, auth: {username}} = this.store;\r\n        return (\r\n            <Drawer variant={\"permanent\"} anchor={\"left\"} className={\"drawer\"} classes={{paper: \"paper\"}}>\r\n                <CoreNavigationHeader onLogout={logout} logged={isLogged} username={username}/>\r\n                <Divider/>\r\n                <CoreNavigationContent logged={isLogged}/>\r\n            </Drawer>\r\n        );\r\n    }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport {AppBar, Toolbar} from \"@material-ui/core\";\r\nimport {PureTypography} from \"../pure\";\r\n\r\nexport default class CoreAppBar extends React.Component {\r\n    shouldComponentUpdate = (): boolean => false;\r\n\r\n    render = () => {\r\n        return (\r\n            <Fragment>\r\n                <AppBar position={\"fixed\"} className={\"bar\"}>\r\n                    <Toolbar>\r\n                        <PureTypography variant=\"h6\">Coluncol</PureTypography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Toolbar/>\r\n                <Toolbar/>\r\n            </Fragment>\r\n        );\r\n    };\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {BrowserRouter} from 'react-router-dom'\nimport CoreRouter from \"./components/core/CoreRouter\";\nimport CoreNavigationDrawer from \"./components/core/CoreNavigationDrawer\";\nimport CoreAppBar from \"./components/core/CoreAppBar\";\nimport {Provider} from \"mobx-react\";\nimport {store} from \"./config/store\";\nimport {Grid} from \"@material-ui/core\";\n\nexport default class App extends React.Component {\n    render = () => {\n        return (\n            <BrowserRouter>\n                <Provider store={store}>\n                    <div className=\"App\">\n                        <CoreNavigationDrawer/>\n                        <main className={\"content\"}>\n                            <CoreAppBar/>\n                            <Grid container >\n                                <Grid item xs={12}>\n                                    <CoreRouter/>\n                                </Grid>\n                            </Grid>\n                        </main>\n                    </div>\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport {Button, TextField, Typography} from \"@material-ui/core\";\r\nimport {ButtonProps} from \"@material-ui/core/Button\";\r\nimport {TextFieldProps} from \"@material-ui/core/TextField\";\r\nimport {TypographyProps} from \"@material-ui/core/Typography\";\r\n\r\ntype Hash = { [x: string]: any };\r\n\r\nclass PureTypography extends React.Component<TypographyProps & Hash> {\r\n    shouldComponentUpdate = (nextProps: Readonly<TypographyProps>): boolean => this.props.children !== nextProps.children;\r\n    render = () => <Typography {...this.props}/>;\r\n}\r\n\r\nclass PureButton extends React.Component<ButtonProps & Hash> {\r\n    shouldComponentUpdate = (nextProps: Readonly<ButtonProps & Hash>): boolean => this.props.disabled !== nextProps.disabled;\r\n    render = () => <Button {...this.props} />;\r\n}\r\n\r\nclass PureTextField extends React.Component<TextFieldProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<TextFieldProps>): boolean => this.props.value !== nextProps.value;\r\n    render = () => <TextField {...this.props} />;\r\n}\r\n\r\nexport {PureButton, PureTextField, PureTypography};\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {Component} from \"react\";\r\nimport {StoreProps, StoreType} from \"../store\";\r\n\r\nclass Store {\r\n    @observable auth: AuthInfo = {\r\n        logged: true,\r\n        username: \"IE Jesus Maestro\",\r\n        admin: false\r\n    };\r\n    @observable teachers: Teacher[] = [{id: 1, name: \"Jose Padilla\"}];\r\n    @observable studyAreas: StudyArea[] = [\r\n        {id: 1, name: \"Humanidades\", bossId: 1},\r\n        {id: 2, name: \"Ciencias\", bossId: 1},\r\n        {id: 3, name: \"Etica y valores\", bossId: 1},\r\n    ];\r\n    @observable subjects: Subject[] = [{id: 1, name: \"Ciencias Sociales\", hours: 4, areaId: 1}];\r\n\r\n    @computed get isLogged(): boolean {\r\n        return this.auth.logged;\r\n    }\r\n\r\n    @computed get isUnlogged(): boolean {\r\n        return !this.auth.logged;\r\n    }\r\n\r\n    @action login = (username: string) => {\r\n        this.auth = {username, logged: true, admin: true};\r\n    };\r\n\r\n    @action logout = () => this.auth = {username: \"\", logged: false, admin: false};\r\n\r\n    findArea = (id: number): StudyArea => this.studyAreas.find((area) => area.id === id);\r\n}\r\n\r\nclass WithStore<P = {}, S = {}> extends Component<P & StoreProps, S> {\r\n    get store(): StoreType {\r\n        return this.props.store!!;\r\n    }\r\n}\r\n\r\nconst store = new Store();\r\nexport {store, WithStore};\r\n"],"sourceRoot":""}