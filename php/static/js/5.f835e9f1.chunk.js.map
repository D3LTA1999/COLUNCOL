{"version":3,"sources":["pages/LoginPage.tsx"],"names":["LoginPage","props","shouldComponentUpdate","nextProps","nextState","loggedIn","state","onLoginClick","onLogin","username","password","onTextFieldChange","e","setState","target","id","value","render","to","container","justify","item","xs","sm","md","lg","className","spacing","variant","fullWidth","label","onChange","type","color","onClick","component","Link","React","Component","connect","auth","dispatch","loginAction"],"mappings":"0PAiBMA,E,YACF,WAAYC,GAAwB,IAAD,8BAC/B,4CAAMA,KAIVC,sBAAwB,SAACC,EAAqCC,GAC1D,OAAO,EAAKH,MAAMI,WAAaF,EAAUE,UAAY,EAAKC,QAAUF,GANrC,EASnCG,aAAe,WAAO,IACXC,EAAW,EAAKP,MAAhBO,QADU,EAEY,EAAKF,MAA3BG,EAFU,EAEVA,SAFU,EAEAC,SACbF,GAASA,EAAQC,IAZU,EAenCE,kBAAoB,SAACC,GAAD,OAAsC,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,SAf9D,EAiBnCC,OAAS,WAAO,IAAD,EACkB,EAAKX,MAA3BG,EADI,EACJA,SAAUC,EADN,EACMA,SACjB,OAAI,EAAKT,MAAMI,SAAiB,kBAAC,IAAD,CAAUa,GAAI,MAE1C,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,UACrB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACjC,kBAAC,IAAD,CAAMC,UAAW,cACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMP,WAAS,EAACQ,QAAS,GACrB,kBAAC,IAAD,CAAMN,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAYM,QAAS,MAArB,sBAEJ,kBAAC,IAAD,CAAMP,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAMH,WAAS,EAACQ,QAAS,GACrB,kBAAC,IAAD,CAAMN,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAWO,WAAS,EAACD,QAAS,WAAYb,GAAI,WACnCe,MAAO,UAAWC,SAAU,EAAKpB,kBACjCK,MAAOP,KAEtB,kBAAC,IAAD,CAAMY,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAWO,WAAS,EAACD,QAAS,WAAYb,GAAI,WACnCe,MAAO,gBAAcE,KAAM,WAC3BD,SAAU,EAAKpB,kBAAmBK,MAAON,OAIhE,kBAAC,IAAD,CAAMW,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAMH,WAAS,EAACC,QAAS,iBACrB,kBAAC,IAAD,CAAMC,MAAI,GACN,kBAAC,IAAD,CAAQY,MAAO,UAAWL,QAAS,YAAaM,QAAS,EAAK3B,cAA9D,mBAIJ,kBAAC,IAAD,CAAMc,MAAI,GACN,kBAAC,IAAD,CAAQc,UAAWC,IAAMlB,GAAI,KAA7B,4BAjDpC,EAAKZ,MAAQ,CAACG,SAAU,GAAIC,SAAU,IAFP,E,2BADf2B,IAAMC,WAyEfC,uBARS,SAAC,GAAD,MAA8B,CAClDlC,SADoB,EAAEmC,KACPnC,aAGQ,SAACoC,GAAD,MAA6C,CACpEjC,QAAS,SAACC,GAAD,OAAcgC,EAASC,YAAYjC,QAGjC8B,CAA6CvC","file":"static/js/5.f835e9f1.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {Button, Card, CardContent, Grid, TextField, Typography} from \"@material-ui/core\";\r\nimport {connect} from \"react-redux\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {loginAction} from \"../config/authReducer\";\r\n\r\ntype ReduxProps = Partial<{\r\n    loggedIn: boolean,\r\n    onLogin: (username: string) => void\r\n}>;\r\n\r\ntype LoginPageProps = {} & ReduxProps;\r\n\r\ntype LoginPageState = {\r\n    [x: string]: string\r\n}\r\n\r\nclass LoginPage extends React.Component<LoginPageProps, LoginPageState> {\r\n    constructor(props: LoginPageProps) {\r\n        super(props);\r\n        this.state = {username: \"\", password: \"\"};\r\n    }\r\n\r\n    shouldComponentUpdate = (nextProps: Readonly<LoginPageProps>, nextState: Readonly<LoginPageState>): boolean => {\r\n        return this.props.loggedIn !== nextProps.loggedIn || this.state !== nextState;\r\n    };\r\n\r\n    onLoginClick = () => {\r\n        const {onLogin} = this.props;\r\n        const {username, password} = this.state;\r\n        if (onLogin) onLogin(username);\r\n    };\r\n\r\n    onTextFieldChange = (e: ChangeEvent<HTMLInputElement>) => this.setState({[e.target.id]: e.target.value});\r\n\r\n    render = () => {\r\n        const {username, password} = this.state;\r\n        if (this.props.loggedIn) return <Redirect to={\"/\"}/>;\r\n        return (\r\n            <Grid container justify={\"center\"}>\r\n                <Grid item xs={12} sm={7} md={5} lg={4}>\r\n                    <Card className={\"login-card\"}>\r\n                        <CardContent>\r\n                            <Grid container spacing={6}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant={\"h5\"}>INICIAR SESIÓN</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs={12}>\r\n                                            <TextField fullWidth variant={\"outlined\"} id={\"username\"}\r\n                                                       label={\"Usuario\"} onChange={this.onTextFieldChange}\r\n                                                       value={username}/>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <TextField fullWidth variant={\"outlined\"} id={\"password\"}\r\n                                                       label={\"Contraseña\"} type={\"password\"}\r\n                                                       onChange={this.onTextFieldChange} value={password}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container justify={\"space-between\"}>\r\n                                        <Grid item>\r\n                                            <Button color={\"primary\"} variant={\"contained\"} onClick={this.onLoginClick}>\r\n                                                iniciar sesion\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Button component={Link} to={\"/\"}>volver a inicio</Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({auth}: any): ReduxProps => ({\r\n    loggedIn: auth.loggedIn\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (p: any) => void): ReduxProps => ({\r\n    onLogin: (username) => dispatch(loginAction(username))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n"],"sourceRoot":""}