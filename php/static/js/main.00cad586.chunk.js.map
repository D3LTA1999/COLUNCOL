{"version":3,"sources":["components/core/CoreNavigationHeader.tsx","components/core/CoreNavigationContent.tsx","components/core/CoreTopAppBar.tsx","config/authReducer.ts","components/core/CoreNavigation.tsx","config/reducers.ts","components/core/CoreRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CoreNavigationHeader","shouldComponentUpdate","nextProps","props","loggedIn","render","username","onLoginClick","onLogoutClick","onClick","raised","dense","React","Component","CoreNavigationContent","primaryText","CoreTopAppBar","align","navIcon","tabIndex","hasRipple","icon","onHamburgerClick","initialState","CoreNavigation","nextState","nextContext","state","open","switchDrawer","setState","login","logout","children","modal","onClose","className","connect","auth","dispatch","type","payload","combineReducers","action","console","log","LazyHomePage","Loadable","loader","loading","indeterminate","LazyNotFound","CoreRouter","exact","path","component","PureComponent","store","createStore","reducers","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00cad586.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {DrawerHeader} from \"@material/react-drawer\";\r\nimport {Body1, Overline} from \"@material/react-typography\";\r\nimport Button from \"@material/react-button\";\r\n\r\ninterface CoreNavigationHeaderProps {\r\n    loggedIn: boolean,\r\n    username: string | null,\r\n    onLoginClick: () => void,\r\n    onLogoutClick: () => void\r\n}\r\n\r\nexport default class CoreNavigationHeader extends React.Component<CoreNavigationHeaderProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationHeaderProps>): boolean => this.props.loggedIn !== nextProps.loggedIn;\r\n\r\n    render = () => {\r\n        const {loggedIn, username, onLoginClick, onLogoutClick} = this.props;\r\n        if (loggedIn) return (\r\n            <DrawerHeader>\r\n                <Overline>usuario actual</Overline>\r\n                <Body1>{username}</Body1>\r\n                <Button onClick={onLogoutClick} raised dense>Cerrar sesion</Button>\r\n            </DrawerHeader>\r\n        );\r\n        else return (\r\n            <DrawerHeader>\r\n                <Overline>debe iniciar sesi√≥n</Overline>\r\n                <Button onClick={onLoginClick} raised dense>Iniciar sesion</Button>\r\n            </DrawerHeader>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport List, {ListItem, ListItemText} from \"@material/react-list\";\r\n\r\ninterface CoreNavigationContentProps {\r\n    loggedIn: boolean\r\n}\r\n\r\nexport default class CoreNavigationContent extends React.Component<CoreNavigationContentProps> {\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationContentProps>): boolean => this.props.loggedIn !== nextProps.loggedIn;\r\n\r\n    render = () => {\r\n        if (!this.props.loggedIn) return (\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primaryText='Photos'/>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primaryText='Recipes'/>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primaryText='Work'/>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n        else return null;\r\n    }\r\n}","import React from \"react\";\r\nimport TopAppBar, {TopAppBarIcon, TopAppBarRow, TopAppBarSection, TopAppBarTitle} from \"@material/react-top-app-bar\";\r\nimport MaterialIcon from \"@material/react-material-icon\";\r\n\r\ninterface CoreTopAppBarProps {\r\n    onHamburgerClick: () => void\r\n}\r\n\r\nexport default class CoreTopAppBar extends React.Component<CoreTopAppBarProps> {\r\n    shouldComponentUpdate = (): boolean => false;\r\n\r\n    render = () => {\r\n        return (\r\n            <TopAppBar>\r\n                <TopAppBarRow>\r\n                    <TopAppBarSection align='start'>\r\n                        <TopAppBarIcon navIcon tabIndex={0}>\r\n                            <MaterialIcon hasRipple icon='menu' onClick={this.props.onHamburgerClick}/>\r\n                        </TopAppBarIcon>\r\n                        <TopAppBarTitle>Coluncol</TopAppBarTitle>\r\n                    </TopAppBarSection>\r\n                    {/*<TopAppBarSection align='end' role='toolbar'>*/}\r\n                    {/*    <TopAppBarIcon actionItem tabIndex={0}>*/}\r\n                    {/*        <MaterialIcon*/}\r\n                    {/*            aria-label=\"print page\"*/}\r\n                    {/*            hasRipple*/}\r\n                    {/*            icon='print'*/}\r\n                    {/*            onClick={() => console.log('print')}*/}\r\n                    {/*        />*/}\r\n                    {/*    </TopAppBarIcon>*/}\r\n                    {/*</TopAppBarSection>*/}\r\n                </TopAppBarRow>\r\n            </TopAppBar>\r\n        );\r\n    }\r\n}","interface AuthState {\r\n    loggedIn: boolean,\r\n    username: string | null\r\n}\r\n\r\nconst LOGIN = 'LOGIN';\r\nconst LOGOUT = 'LOGOUT';\r\n\r\ntype Action = { type: 'LOGIN', payload: { username: string } } | { type: 'LOGOUT' }\r\n\r\nconst loginAction = (username: string): Action => ({type: LOGIN, payload: {username}});\r\nconst logoutAction = (): Action => ({type: LOGOUT});\r\n\r\nconst initialState: AuthState = {\r\n    loggedIn: false,\r\n    username: null\r\n};\r\n\r\nconst authReducer = (state: AuthState = initialState, action: Action): AuthState => {\r\n    console.log(state);\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {...state, loggedIn: true, username: action.payload.username};\r\n        case LOGOUT:\r\n            return {...state, loggedIn: false, username: null};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport {LOGIN, LOGOUT, loginAction, logoutAction, authReducer};","import React, {Fragment} from 'react';\r\nimport Drawer, {DrawerAppContent} from \"@material/react-drawer\";\r\nimport {TopAppBarFixedAdjust} from \"@material/react-top-app-bar\";\r\nimport {connect} from \"react-redux\";\r\nimport CoreNavigationHeader from \"./CoreNavigationHeader\";\r\nimport CoreNavigationContent from \"./CoreNavigationContent\";\r\nimport CoreTopAppBar from \"./CoreTopAppBar\";\r\nimport {loginAction, logoutAction} from \"../../config/authReducer\";\r\n\r\ninterface CoreNavigationProps {\r\n    loggedIn: boolean,\r\n    username: string | null,\r\n    login: () => void,\r\n    logout: () => void\r\n}\r\n\r\ninterface CoreNavigationState {\r\n    open: boolean\r\n}\r\n\r\nclass CoreNavigation extends React.Component<CoreNavigationProps, CoreNavigationState> {\r\n    constructor(props: CoreNavigationProps) {\r\n        super(props);\r\n        this.state = {open: false};\r\n    }\r\n\r\n    shouldComponentUpdate = (nextProps: Readonly<CoreNavigationProps>, nextState: Readonly<CoreNavigationState>, nextContext: any): boolean => {\r\n        return this.props.loggedIn !== nextProps.loggedIn || this.state.open !== nextState.open;\r\n    };\r\n\r\n    switchDrawer = () => this.setState({open: !this.state.open});\r\n\r\n    login = () => {\r\n        this.props.login();\r\n    };\r\n\r\n    logout = () => {\r\n        this.props.logout();\r\n    };\r\n\r\n    render = () => {\r\n        const {children, loggedIn, username} = this.props;\r\n        const {open} = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Drawer modal open={open} onClose={this.switchDrawer}>\r\n                    <CoreNavigationHeader onLoginClick={this.login} onLogoutClick={this.logout} loggedIn={loggedIn}\r\n                                          username={username}/>\r\n                    <hr className={\"mdc-list-divider\"}/>\r\n                    <CoreNavigationContent loggedIn={loggedIn}/>\r\n                </Drawer>\r\n                <DrawerAppContent>\r\n                    <CoreTopAppBar onHamburgerClick={this.switchDrawer}/>\r\n                    <TopAppBarFixedAdjust>{children}</TopAppBarFixedAdjust>\r\n                </DrawerAppContent>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    loggedIn: state.auth.loggedIn,\r\n    username: state.auth.username\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (v: any) => any) => ({\r\n    login: () => dispatch(loginAction(\"IE Jesus Maestro\")),\r\n    logout: () => dispatch(logoutAction())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CoreNavigation);\r\n","import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nexport default combineReducers({\r\n    auth: authReducer\r\n});\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\nimport LinearProgress from \"@material/react-linear-progress\";\r\n\r\nconst LazyHomePage = Loadable({\r\n    loader: () => import(\"../../pages/HomePage\"),\r\n    loading: () => <LinearProgress indeterminate/>\r\n});\r\nconst LazyNotFound = Loadable({\r\n    loader: () => import(\"../../pages/NotFoundPage\"),\r\n    loading: () => <LinearProgress indeterminate/>\r\n});\r\n\r\nexport default class CoreRouter extends React.PureComponent {\r\n    render = () => {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={LazyHomePage}/>\r\n                <Route component={LazyNotFound}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport CoreNavigation from \"./components/core/CoreNavigation\";\nimport {createStore} from \"redux\";\nimport reducers from \"./config/reducers\";\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom'\nimport CoreRouter from \"./components/core/CoreRouter\";\n\nconst store = createStore(reducers);\n\nexport default class App extends React.Component {\n    render = () => {\n        return (\n            <BrowserRouter>\n                <Provider store={store}>\n                    <CoreNavigation>\n                        <CoreRouter/>\n                    </CoreNavigation>\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}